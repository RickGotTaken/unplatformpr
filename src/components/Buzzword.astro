---
interface Props {
	definition: string;
}
const { definition } = Astro.props;
const buzzwordId = crypto.randomUUID();
const cardId = crypto.randomUUID();
// TODO: replace with proper intersectionObserver api - current solution is unstable
---

<span
	id={buzzwordId}
	title={definition}
	tabindex="0"
	class="cursor-help relative group drop-shadow-none"
>
	<span
		class="group-hover:hover:brightness-125 text-accentColor underline decoration-dotted drop-shadow-none"
	>
		<slot /><sup class="text-accentColor">?</sup></span
	>
</span>

<div
	id={cardId}
	class:list={[
		"p-8 fixed transition-all top-0 right-0 w-full h-full flex justify-center items-center translate-x-full backdrop-blur-0 pointer-events-none z-10",
		"data-[active]:backdrop-blur-lg data-[active]:translate-x-0 data-[active]:pointer-events-auto"
	]}
>
	<p class="p-4 bg-bgColor border border-textColor max-w-lg">{definition}</p>
</div>

<script define:vars={{buzzwordId, cardId, definition}}>
	const buzzword = document.getElementById(buzzwordId)
	const cardContainer = document.getElementById(cardId);
	const cardText = cardContainer?.querySelector("p");

	if (!buzzword || !cardContainer || !cardText) {
		throw new Error(`Could not activate definition card for definition ${definition}.\n${{buzzwordId, cardContainer, cardText}}`);
	}

	buzzword.addEventListener("pointerdown", () => cardContainer.dataset["active"] = "true")
	cardContainer.addEventListener("pointerdown", () => delete cardContainer.dataset["active"])
</script>
